// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package domain

import (
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"github.com/google/uuid"
	"time"
)

// weaver.InstanceOf checks.

// weaver.Router checks.

// Local stub implementations.

// Client stub implementations.

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.6 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

// Reflect stub implementations.

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Challenge)(nil)

type __is_Challenge[T ~struct {
	weaver.AutoMarshal
	Id            uuid.UUID "json:\"id\""
	Title         string    "json:\"title\""
	Description   string    "json:\"description\""
	Statement     string    "json:\"statement\""
	StartDateTime time.Time "json:\"start_date_time\""
	EvalScript    string    "json:\"eval_script\""
	InputFileUrls []string  "json:\"input_file_urls\""
}] struct{}

var _ __is_Challenge[Challenge]

func (x *Challenge) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Challenge.WeaverMarshal: nil receiver"))
	}
	enc.EncodeBinaryMarshaler(&x.Id)
	enc.String(x.Title)
	enc.String(x.Description)
	enc.String(x.Statement)
	enc.EncodeBinaryMarshaler(&x.StartDateTime)
	enc.String(x.EvalScript)
	serviceweaver_enc_slice_string_4af10117(enc, x.InputFileUrls)
}

func (x *Challenge) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Challenge.WeaverUnmarshal: nil receiver"))
	}
	dec.DecodeBinaryUnmarshaler(&x.Id)
	x.Title = dec.String()
	x.Description = dec.String()
	x.Statement = dec.String()
	dec.DecodeBinaryUnmarshaler(&x.StartDateTime)
	x.EvalScript = dec.String()
	x.InputFileUrls = serviceweaver_dec_slice_string_4af10117(dec)
}

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

var _ codegen.AutoMarshal = (*Config)(nil)

type __is_Config[T ~struct {
	weaver.AutoMarshal
	Supabase       SupabaseConfig "json:\"supabase\""
	DefaultAccount DefaultAccount "json:\"defaultAccount\""
}] struct{}

var _ __is_Config[Config]

func (x *Config) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Config.WeaverMarshal: nil receiver"))
	}
	(x.Supabase).WeaverMarshal(enc)
	(x.DefaultAccount).WeaverMarshal(enc)
}

func (x *Config) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Config.WeaverUnmarshal: nil receiver"))
	}
	(&x.Supabase).WeaverUnmarshal(dec)
	(&x.DefaultAccount).WeaverUnmarshal(dec)
}

var _ codegen.AutoMarshal = (*DefaultAccount)(nil)

type __is_DefaultAccount[T ~struct {
	weaver.AutoMarshal
	Email    string "json:\"email\""
	Password string "json:\"password\""
}] struct{}

var _ __is_DefaultAccount[DefaultAccount]

func (x *DefaultAccount) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("DefaultAccount.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Email)
	enc.String(x.Password)
}

func (x *DefaultAccount) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("DefaultAccount.WeaverUnmarshal: nil receiver"))
	}
	x.Email = dec.String()
	x.Password = dec.String()
}

var _ codegen.AutoMarshal = (*GlobalLeaderboard)(nil)

type __is_GlobalLeaderboard[T ~struct {
	weaver.AutoMarshal
	UId   uuid.UUID "json:\"user_id\""
	Score float64   "json:\"global_rank_score\""
}] struct{}

var _ __is_GlobalLeaderboard[GlobalLeaderboard]

func (x *GlobalLeaderboard) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GlobalLeaderboard.WeaverMarshal: nil receiver"))
	}
	enc.EncodeBinaryMarshaler(&x.UId)
	enc.Float64(x.Score)
}

func (x *GlobalLeaderboard) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GlobalLeaderboard.WeaverUnmarshal: nil receiver"))
	}
	dec.DecodeBinaryUnmarshaler(&x.UId)
	x.Score = dec.Float64()
}

var _ codegen.AutoMarshal = (*Leaderboard)(nil)

type __is_Leaderboard[T ~struct {
	weaver.AutoMarshal
	CId          uuid.UUID "json:\"c_id\""
	UId          uuid.UUID "json:\"u_id\""
	Score        int       "json:\"score\""
	SubmittedAt  time.Time "json:\"submitted_at\""
	LatestUpdate string    "json:\"latest_update\""
	RankScore    int       "json:\"rank_score\""
}] struct{}

var _ __is_Leaderboard[Leaderboard]

func (x *Leaderboard) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Leaderboard.WeaverMarshal: nil receiver"))
	}
	enc.EncodeBinaryMarshaler(&x.CId)
	enc.EncodeBinaryMarshaler(&x.UId)
	enc.Int(x.Score)
	enc.EncodeBinaryMarshaler(&x.SubmittedAt)
	enc.String(x.LatestUpdate)
	enc.Int(x.RankScore)
}

func (x *Leaderboard) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Leaderboard.WeaverUnmarshal: nil receiver"))
	}
	dec.DecodeBinaryUnmarshaler(&x.CId)
	dec.DecodeBinaryUnmarshaler(&x.UId)
	x.Score = dec.Int()
	dec.DecodeBinaryUnmarshaler(&x.SubmittedAt)
	x.LatestUpdate = dec.String()
	x.RankScore = dec.Int()
}

var _ codegen.AutoMarshal = (*ListOpts)(nil)

type __is_ListOpts[T ~struct {
	weaver.AutoMarshal
	Limit  int "json:\"limit\""
	Offset int "json:\"offset\""
}] struct{}

var _ __is_ListOpts[ListOpts]

func (x *ListOpts) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("ListOpts.WeaverMarshal: nil receiver"))
	}
	enc.Int(x.Limit)
	enc.Int(x.Offset)
}

func (x *ListOpts) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("ListOpts.WeaverUnmarshal: nil receiver"))
	}
	x.Limit = dec.Int()
	x.Offset = dec.Int()
}

var _ codegen.AutoMarshal = (*Profile)(nil)

type __is_Profile[T ~struct {
	weaver.AutoMarshal
	Id            uuid.UUID "json:\"id\""
	Email         string    "json:\"email\""
	FullName      string    "json:\"full_name\""
	AvatarUrl     string    "json:\"avatar_url\""
	AccessLevel   int8      "json:\"access_level\""
	LinkedDevPass string    "json:\"linked_dev_pass\""
}] struct{}

var _ __is_Profile[Profile]

func (x *Profile) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Profile.WeaverMarshal: nil receiver"))
	}
	enc.EncodeBinaryMarshaler(&x.Id)
	enc.String(x.Email)
	enc.String(x.FullName)
	enc.String(x.AvatarUrl)
	enc.Int8(x.AccessLevel)
	enc.String(x.LinkedDevPass)
}

func (x *Profile) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Profile.WeaverUnmarshal: nil receiver"))
	}
	dec.DecodeBinaryUnmarshaler(&x.Id)
	x.Email = dec.String()
	x.FullName = dec.String()
	x.AvatarUrl = dec.String()
	x.AccessLevel = dec.Int8()
	x.LinkedDevPass = dec.String()
}

var _ codegen.AutoMarshal = (*Submission)(nil)

type __is_Submission[T ~struct {
	weaver.AutoMarshal
	Id            uuid.UUID "json:\"id\""
	ChallengeId   uuid.UUID "json:\"challenge_id\""
	UserId        uuid.UUID "json:\"user_id\""
	OutputFileUrl string    "json:\"output_file_url\""
	SourceCodeUrl string    "json:\"source_code_url\""
	InputFileId   string    "json:\"input_file_id\""
	Score         float64   "json:\"score\""
	RankScore     float64   "json:\"rank_score\""
}] struct{}

var _ __is_Submission[Submission]

func (x *Submission) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Submission.WeaverMarshal: nil receiver"))
	}
	enc.EncodeBinaryMarshaler(&x.Id)
	enc.EncodeBinaryMarshaler(&x.ChallengeId)
	enc.EncodeBinaryMarshaler(&x.UserId)
	enc.String(x.OutputFileUrl)
	enc.String(x.SourceCodeUrl)
	enc.String(x.InputFileId)
	enc.Float64(x.Score)
	enc.Float64(x.RankScore)
}

func (x *Submission) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Submission.WeaverUnmarshal: nil receiver"))
	}
	dec.DecodeBinaryUnmarshaler(&x.Id)
	dec.DecodeBinaryUnmarshaler(&x.ChallengeId)
	dec.DecodeBinaryUnmarshaler(&x.UserId)
	x.OutputFileUrl = dec.String()
	x.SourceCodeUrl = dec.String()
	x.InputFileId = dec.String()
	x.Score = dec.Float64()
	x.RankScore = dec.Float64()
}

var _ codegen.AutoMarshal = (*SubmitResult)(nil)

type __is_SubmitResult[T ~struct {
	weaver.AutoMarshal
	ChallengeId  uuid.UUID "json:\"challenge_id\""
	Score        float64   "json:\"score\""
	UserId       uuid.UUID "json:\"user_id\""
	ErrorMessage string    "json:\"error_message\""
	LogMessage   string    "json:\"log_message\""
}] struct{}

var _ __is_SubmitResult[SubmitResult]

func (x *SubmitResult) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("SubmitResult.WeaverMarshal: nil receiver"))
	}
	enc.EncodeBinaryMarshaler(&x.ChallengeId)
	enc.Float64(x.Score)
	enc.EncodeBinaryMarshaler(&x.UserId)
	enc.String(x.ErrorMessage)
	enc.String(x.LogMessage)
}

func (x *SubmitResult) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("SubmitResult.WeaverUnmarshal: nil receiver"))
	}
	dec.DecodeBinaryUnmarshaler(&x.ChallengeId)
	x.Score = dec.Float64()
	dec.DecodeBinaryUnmarshaler(&x.UserId)
	x.ErrorMessage = dec.String()
	x.LogMessage = dec.String()
}

var _ codegen.AutoMarshal = (*SupabaseConfig)(nil)

type __is_SupabaseConfig[T ~struct {
	weaver.AutoMarshal
	Postgres   string "json:\"postgres\""
	Api        string "json:\"api\""
	JwtSecret  string "json:\"jwtSecret\""
	AnonKey    string "json:\"anonKey\""
	ServiceKey string "json:\"serviceKey\""
	S3Access   string "json:\"s3Access\""
	S3Secret   string "json:\"s3Secret\""
	S3Region   string "json:\"s3Region\""
}] struct{}

var _ __is_SupabaseConfig[SupabaseConfig]

func (x *SupabaseConfig) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("SupabaseConfig.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Postgres)
	enc.String(x.Api)
	enc.String(x.JwtSecret)
	enc.String(x.AnonKey)
	enc.String(x.ServiceKey)
	enc.String(x.S3Access)
	enc.String(x.S3Secret)
	enc.String(x.S3Region)
}

func (x *SupabaseConfig) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("SupabaseConfig.WeaverUnmarshal: nil receiver"))
	}
	x.Postgres = dec.String()
	x.Api = dec.String()
	x.JwtSecret = dec.String()
	x.AnonKey = dec.String()
	x.ServiceKey = dec.String()
	x.S3Access = dec.String()
	x.S3Secret = dec.String()
	x.S3Region = dec.String()
}
