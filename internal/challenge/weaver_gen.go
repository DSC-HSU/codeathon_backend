// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package challenge

import (
	"codeathon.runwayclub.dev/domain"
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "codeathon.runwayclub.dev/internal/challenge/ChallengeService",
		Iface: reflect.TypeOf((*ChallengeService)(nil)).Elem(),
		Impl:  reflect.TypeOf(challengeService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return challengeService_local_stub{impl: impl.(ChallengeService), tracer: tracer, createMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Create", Remote: false, Generated: true}), deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Delete", Remote: false, Generated: true}), getByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "GetById", Remote: false, Generated: true}), listMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "List", Remote: false, Generated: true}), scoringMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Scoring", Remote: false, Generated: true}), updateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Update", Remote: false, Generated: true}), uploadEvalScriptMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "UploadEvalScript", Remote: false, Generated: true}), uploadInputFilesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "UploadInputFiles", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return challengeService_client_stub{stub: stub, createMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Create", Remote: true, Generated: true}), deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Delete", Remote: true, Generated: true}), getByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "GetById", Remote: true, Generated: true}), listMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "List", Remote: true, Generated: true}), scoringMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Scoring", Remote: true, Generated: true}), updateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "Update", Remote: true, Generated: true}), uploadEvalScriptMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "UploadEvalScript", Remote: true, Generated: true}), uploadInputFilesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "codeathon.runwayclub.dev/internal/challenge/ChallengeService", Method: "UploadInputFiles", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return challengeService_server_stub{impl: impl.(ChallengeService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return challengeService_reflect_stub{caller: caller}
		},
		RefData: "⟦1929ac8e:wEaVeReDgE:codeathon.runwayclub.dev/internal/challenge/ChallengeService→codeathon.runwayclub.dev/internal/submission/SubmissionService⟧\n",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[ChallengeService] = (*challengeService)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*challengeService)(nil)

// Local stub implementations.

type challengeService_local_stub struct {
	impl                    ChallengeService
	tracer                  trace.Tracer
	createMetrics           *codegen.MethodMetrics
	deleteMetrics           *codegen.MethodMetrics
	getByIdMetrics          *codegen.MethodMetrics
	listMetrics             *codegen.MethodMetrics
	scoringMetrics          *codegen.MethodMetrics
	updateMetrics           *codegen.MethodMetrics
	uploadEvalScriptMetrics *codegen.MethodMetrics
	uploadInputFilesMetrics *codegen.MethodMetrics
}

// Check that challengeService_local_stub implements the ChallengeService interface.
var _ ChallengeService = (*challengeService_local_stub)(nil)

func (s challengeService_local_stub) Create(ctx context.Context, a0 *domain.Challenge) (err error) {
	// Update metrics.
	begin := s.createMetrics.Begin()
	defer func() { s.createMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.Create", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Create(ctx, a0)
}

func (s challengeService_local_stub) Delete(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.Delete", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Delete(ctx, a0)
}

func (s challengeService_local_stub) GetById(ctx context.Context, a0 string) (r0 *domain.Challenge, err error) {
	// Update metrics.
	begin := s.getByIdMetrics.Begin()
	defer func() { s.getByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.GetById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetById(ctx, a0)
}

func (s challengeService_local_stub) List(ctx context.Context, a0 *domain.ListOpts) (r0 *domain.ListResult[*domain.Challenge], err error) {
	// Update metrics.
	begin := s.listMetrics.Begin()
	defer func() { s.listMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.List", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.List(ctx, a0)
}

func (s challengeService_local_stub) Scoring(ctx context.Context, a0 *domain.Submission) (r0 *domain.SubmitResult, err error) {
	// Update metrics.
	begin := s.scoringMetrics.Begin()
	defer func() { s.scoringMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.Scoring", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Scoring(ctx, a0)
}

func (s challengeService_local_stub) Update(ctx context.Context, a0 *domain.Challenge) (err error) {
	// Update metrics.
	begin := s.updateMetrics.Begin()
	defer func() { s.updateMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.Update", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Update(ctx, a0)
}

func (s challengeService_local_stub) UploadEvalScript(ctx context.Context, a0 string, a1 []byte) (err error) {
	// Update metrics.
	begin := s.uploadEvalScriptMetrics.Begin()
	defer func() { s.uploadEvalScriptMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.UploadEvalScript", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadEvalScript(ctx, a0, a1)
}

func (s challengeService_local_stub) UploadInputFiles(ctx context.Context, a0 string, a1 [][]byte) (err error) {
	// Update metrics.
	begin := s.uploadInputFilesMetrics.Begin()
	defer func() { s.uploadInputFilesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "challenge.ChallengeService.UploadInputFiles", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadInputFiles(ctx, a0, a1)
}

// Client stub implementations.

type challengeService_client_stub struct {
	stub                    codegen.Stub
	createMetrics           *codegen.MethodMetrics
	deleteMetrics           *codegen.MethodMetrics
	getByIdMetrics          *codegen.MethodMetrics
	listMetrics             *codegen.MethodMetrics
	scoringMetrics          *codegen.MethodMetrics
	updateMetrics           *codegen.MethodMetrics
	uploadEvalScriptMetrics *codegen.MethodMetrics
	uploadInputFilesMetrics *codegen.MethodMetrics
}

// Check that challengeService_client_stub implements the ChallengeService interface.
var _ ChallengeService = (*challengeService_client_stub)(nil)

func (s challengeService_client_stub) Create(ctx context.Context, a0 *domain.Challenge) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createMetrics.Begin()
	defer func() { s.createMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.Create", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_Challenge_d302c191(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) Delete(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.Delete", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) GetById(ctx context.Context, a0 string) (r0 *domain.Challenge, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getByIdMetrics.Begin()
	defer func() { s.getByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.GetById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_Challenge_d302c191(dec)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) List(ctx context.Context, a0 *domain.ListOpts) (r0 *domain.ListResult[*domain.Challenge], err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.listMetrics.Begin()
	defer func() { s.listMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.List", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ListOpts_73a4ea72(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_ListResult_ptr_Challenge_47fe391d(dec)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) Scoring(ctx context.Context, a0 *domain.Submission) (r0 *domain.SubmitResult, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.scoringMetrics.Begin()
	defer func() { s.scoringMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.Scoring", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_Submission_54a2faef(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_SubmitResult_af2c752e(dec)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) Update(ctx context.Context, a0 *domain.Challenge) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateMetrics.Begin()
	defer func() { s.updateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.Update", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_Challenge_d302c191(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) UploadEvalScript(ctx context.Context, a0 string, a1 []byte) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadEvalScriptMetrics.Begin()
	defer func() { s.uploadEvalScriptMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.UploadEvalScript", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + (len(a1) * 1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	serviceweaver_enc_slice_byte_87461245(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s challengeService_client_stub) UploadInputFiles(ctx context.Context, a0 string, a1 [][]byte) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadInputFilesMetrics.Begin()
	defer func() { s.uploadInputFilesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "challenge.ChallengeService.UploadInputFiles", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.String(a0)
	serviceweaver_enc_slice_slice_byte_8acc26ee(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 7, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.6 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type challengeService_server_stub struct {
	impl    ChallengeService
	addLoad func(key uint64, load float64)
}

// Check that challengeService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*challengeService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s challengeService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Create":
		return s.create
	case "Delete":
		return s.delete
	case "GetById":
		return s.getById
	case "List":
		return s.list
	case "Scoring":
		return s.scoring
	case "Update":
		return s.update
	case "UploadEvalScript":
		return s.uploadEvalScript
	case "UploadInputFiles":
		return s.uploadInputFiles
	default:
		return nil
	}
}

func (s challengeService_server_stub) create(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *domain.Challenge
	a0 = serviceweaver_dec_ptr_Challenge_d302c191(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Create(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) delete(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Delete(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) getById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetById(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_Challenge_d302c191(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) list(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *domain.ListOpts
	a0 = serviceweaver_dec_ptr_ListOpts_73a4ea72(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.List(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ListResult_ptr_Challenge_47fe391d(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) scoring(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *domain.Submission
	a0 = serviceweaver_dec_ptr_Submission_54a2faef(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Scoring(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_SubmitResult_af2c752e(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) update(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 *domain.Challenge
	a0 = serviceweaver_dec_ptr_Challenge_d302c191(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Update(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) uploadEvalScript(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 []byte
	a1 = serviceweaver_dec_slice_byte_87461245(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadEvalScript(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s challengeService_server_stub) uploadInputFiles(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 [][]byte
	a1 = serviceweaver_dec_slice_slice_byte_8acc26ee(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadInputFiles(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type challengeService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that challengeService_reflect_stub implements the ChallengeService interface.
var _ ChallengeService = (*challengeService_reflect_stub)(nil)

func (s challengeService_reflect_stub) Create(ctx context.Context, a0 *domain.Challenge) (err error) {
	err = s.caller("Create", ctx, []any{a0}, []any{})
	return
}

func (s challengeService_reflect_stub) Delete(ctx context.Context, a0 string) (err error) {
	err = s.caller("Delete", ctx, []any{a0}, []any{})
	return
}

func (s challengeService_reflect_stub) GetById(ctx context.Context, a0 string) (r0 *domain.Challenge, err error) {
	err = s.caller("GetById", ctx, []any{a0}, []any{&r0})
	return
}

func (s challengeService_reflect_stub) List(ctx context.Context, a0 *domain.ListOpts) (r0 *domain.ListResult[*domain.Challenge], err error) {
	err = s.caller("List", ctx, []any{a0}, []any{&r0})
	return
}

func (s challengeService_reflect_stub) Scoring(ctx context.Context, a0 *domain.Submission) (r0 *domain.SubmitResult, err error) {
	err = s.caller("Scoring", ctx, []any{a0}, []any{&r0})
	return
}

func (s challengeService_reflect_stub) Update(ctx context.Context, a0 *domain.Challenge) (err error) {
	err = s.caller("Update", ctx, []any{a0}, []any{})
	return
}

func (s challengeService_reflect_stub) UploadEvalScript(ctx context.Context, a0 string, a1 []byte) (err error) {
	err = s.caller("UploadEvalScript", ctx, []any{a0, a1}, []any{})
	return
}

func (s challengeService_reflect_stub) UploadInputFiles(ctx context.Context, a0 string, a1 [][]byte) (err error) {
	err = s.caller("UploadInputFiles", ctx, []any{a0, a1}, []any{})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_Challenge_d302c191(enc *codegen.Encoder, arg *domain.Challenge) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_Challenge_d302c191(dec *codegen.Decoder) *domain.Challenge {
	if !dec.Bool() {
		return nil
	}
	var res domain.Challenge
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_ListOpts_73a4ea72(enc *codegen.Encoder, arg *domain.ListOpts) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_ListOpts_73a4ea72(dec *codegen.Decoder) *domain.ListOpts {
	if !dec.Bool() {
		return nil
	}
	var res domain.ListOpts
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_ListResult_ptr_Challenge_47fe391d(enc *codegen.Encoder, arg *domain.ListResult[*domain.Challenge]) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeBinaryMarshaler(arg)
	}
}

func serviceweaver_dec_ptr_ListResult_ptr_Challenge_47fe391d(dec *codegen.Decoder) *domain.ListResult[*domain.Challenge] {
	if !dec.Bool() {
		return nil
	}
	var res domain.ListResult[*domain.Challenge]
	dec.DecodeBinaryUnmarshaler(&res)
	return &res
}

func serviceweaver_enc_ptr_Submission_54a2faef(enc *codegen.Encoder, arg *domain.Submission) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_Submission_54a2faef(dec *codegen.Decoder) *domain.Submission {
	if !dec.Bool() {
		return nil
	}
	var res domain.Submission
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_SubmitResult_af2c752e(enc *codegen.Encoder, arg *domain.SubmitResult) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_SubmitResult_af2c752e(dec *codegen.Decoder) *domain.SubmitResult {
	if !dec.Bool() {
		return nil
	}
	var res domain.SubmitResult
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}

func serviceweaver_enc_slice_slice_byte_8acc26ee(enc *codegen.Encoder, arg [][]byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		serviceweaver_enc_slice_byte_87461245(enc, arg[i])
	}
}

func serviceweaver_dec_slice_slice_byte_8acc26ee(dec *codegen.Decoder) [][]byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([][]byte, n)
	for i := 0; i < n; i++ {
		res[i] = serviceweaver_dec_slice_byte_87461245(dec)
	}
	return res
}
